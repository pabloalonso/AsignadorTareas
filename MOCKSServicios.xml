<?xml version="1.0" encoding="UTF-8"?>
<con:soapui-project activeEnvironment="Default" name="BBVA Asignador" resourceRoot="" soapui-version="5.3.0" abortOnError="false" runType="SEQUENTIAL" id="a0f8aa28-aa59-40aa-8b02-fed59a5b1dba" xmlns:con="http://eviware.com/soapui/config"><con:settings/><con:interface xsi:type="con:RestService" wadlVersion="http://wadl.dev.java.net/2009/02" name="http://wildfly" type="rest" id="fae662fa-8717-423a-80f3-8b8e2f300fd0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT" rootPart=""/><con:endpoints><con:endpoint>http://LAP-00190:8080/</con:endpoint><con:endpoint>http://LAP-00190:9090/</con:endpoint><con:endpoint>http://wildfly</con:endpoint></con:endpoints><con:resource name="Asignador" path="/services/parametria" id="246c01c1-003d-4560-a903-ec5e4858c2b7"><con:settings/><con:parameters><con:parameter><con:name>categoria</con:name><con:value>natural</con:value><con:style>QUERY</con:style><con:default>natural</con:default></con:parameter></con:parameters><con:method name="Parametria" method="GET" id="ce89cb77-99eb-43bc-b52e-80404b41d6a0"><con:settings/><con:parameters/><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:par="http://wildfly/services/parametria">par:Response</con:element></con:representation><con:request name="Get Paramtria" mediaType="application/json" id="5604dcf0-e7a0-4cb4-8d82-fafb8a254ad3"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://localhost:9090/</con:endpoint><con:request/><con:originalUri>http://wildfly/services/parametria</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="categoria" value="Natural" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>categoria</con:entry></con:parameterOrder></con:request></con:method></con:resource><con:resource name="Reglas" path="/services/reglas" id="fea21358-1f53-4de6-ac26-7d0be82967ca"><con:settings/><con:parameters><con:parameter><con:name>categoria</con:name><con:value>natural</con:value><con:style>QUERY</con:style><con:default>natural</con:default></con:parameter></con:parameters><con:method name="Reglas" method="GET" id="fc67df3d-7eeb-4cd0-bd35-4705a741624c"><con:settings/><con:parameters><con:parameter><con:name>categoria</con:name><con:value>Natural</con:value><con:style>QUERY</con:style><con:default>Natural</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter></con:parameters><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType>application/xml</con:mediaType><con:status>200</con:status><con:params/></con:representation><con:request name="Get Reglas" mediaType="application/json" id="684cdf10-8b62-4123-88fc-4de981d83815"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://LAP-00190:9090/</con:endpoint><con:request/><con:originalUri>http://LAP-00190/services/parametria</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource></con:interface><con:restMockService port="9090" path="/" host="LAP-00190" name="MOCK Parametria" docroot="" id="0b6f1e67-cf3d-4182-825f-9faafebc2fce"><con:settings/><con:properties/><con:onRequestScript/><con:restMockAction name="/services/parametria" method="GET" resourcePath="/services/parametria" id="c74a76c6-99c0-468f-9380-bebc5c3b89c5"><con:settings/><con:defaultResponse xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/><con:dispatchStyle>SCRIPT</con:dispatchStyle><con:dispatchPath>def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("categoria") )
{
	if(queryString.contains("categoria=Natural"))    
    		return "Natural"
    	else{
    		return "OtraCategoria"
    	}
}else{
	return "NOCatResponse"
}

/*
// Script dispatcher is used to select a response based on the incoming request.
// Here are few examples showing how to match based on path, query param, header and body

// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeaderList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncoding Header List: " + acceptEncodingHeaderList

if( acceptEncodingHeaderList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}


// Match based on body
def requestBody = mockRequest.getRequestContent()
log.info "Request body: " + requestBody

if( requestBody.contains("some data") )
{
    // return the name of the response you want to dispatch
    return "Response N"
}
*/
</con:dispatchPath><con:response name="Natural" httpResponseStatus="200" mediaType="application/json" id="896307c6-3fa4-4d67-ad39-906b7df4bab7"><con:settings/><con:responseContent>{
	"catId": "Natural",
	"campos":[
		{
			"nombre":"Monto",
			"condicion":[
				{
					"key":">=",
					"value":"mayorIgualQue"
				},
				{
					"key":"&lt;=",
					"value":"menorIgualQue"
				},
				{
					"key":"=",
					"value":"igual"
				},
				{
					"key":"BETWEEN",
					"value":"entre"
				}

			],
			"tipoValor":"numerico",
			"valorReferencia": ""
		},
		{
			"nombre":"Producto",
			"condicion":[
				{
					"key":"=",
					"value":"igual"
				},
				{
					"key":"!=",
					"value":"distinto"
				},
				{
					"key":"IN",
					"value":"dentro de"
				}
			],
			"tipoValor":"seleccion",
			"valorReferencia":[
				{
					"key":"Vehiculo",
					"value":"vehiculo"
				},
				{
					"key":"Libranzas",
					"value":"libranzas"
				}
			]
		},
		{
			"nombre":"TechnoIndividual",
			"condicion":[
				{
					"key":">=",
					"value":"mayorIgualQue"
				},
				{
					"key":"&lt;=",
					"value":"menorIgualQue"
				},
				{
					"key":"=",
					"value":"igual"
				},
				{
					"key":"BETWEEN",
					"value":"entre"
				}

			],
			"tipoValor":"numerico",
			"valorReferencia": ""
		},
		{
			"nombre":"TechoGlobal",
			"condicion":[
				{
					"key":">=",
					"value":"mayorIgualQue"
				},
				{
					"key":"&lt;=",
					"value":"menorIgualQue"
				},
				{
					"key":"=",
					"value":"igual"
				},
				{
					"key":"BETWEEN",
					"value":"entre"
				}

			],
			"tipoValor":"numerico",
			"valorReferencia": ""
		},
		{
			"nombre":"FuerzaVenta",
			"condicion":[
				{
					"key":">=",
					"value":"mayorIgualQue"
				},
				{
					"key":"&lt;=",
					"value":"menorIgualQue"
				},
				{
					"key":"=",
					"value":"igual"
				},
				{
					"key":"BETWEEN",
					"value":"entre"
				}

			],
			"tipoValor":"numerico",
			"valorReferencia": ""
		},
		{
			"nombre":"TipoCliente",
			"condicion":[
				{
					"key":"=",
					"value":"igual"
				},
				{
					"key":"!=",
					"value":"distinto"
				},
				{
					"key":"dentro de",
					"value":"dentro de"
				}
			],
			"tipoValor":"seleccion",
			"valorReferencia":[
				{
					"key":"VIP",
					"value":"vip"
				},
				{
					"key":"Especial",
					"value":"especial"
				}
			]
		},
		{
			"nombre":"NombreConvenio",
			"condicion":[
				{
					"key":"=",
					"value":"igual"
				},
				{
					"key":"!=",
					"value":"distinto"
				},
				{
					"key":"dentro de",
					"value":"dentro de"
				}
			],
			"tipoValor":"seleccion",
			"valorReferencia":[
				{
					"key":"Accionistas",
					"value":"accionistas"
				},
				{
					"key":"Trabajadores",
					"value":"trabajadores"
				}
			]
		}
	]
}</con:responseContent><con:header><con:name>Access-Control-Allow-Origin</con:name><con:value>*</con:value></con:header><con:header><con:name>Access-Control-Allow-Methods</con:name><con:value>POST, GET</con:value></con:header></con:response><con:response name="NOCatResponse" httpResponseStatus="204" mediaType="application/json" id="6dd73811-f914-43df-ae2c-c7c2c0835575"><con:settings/><con:responseContent>{"error":"La peticion debe incluir el parametro 'categoria'"}</con:responseContent><con:header><con:name>Access-Control-Allow-Methods</con:name><con:value>POST, GET</con:value></con:header><con:header><con:name>Access-Control-Allow-Origin </con:name><con:value>*</con:value></con:header></con:response><con:response name="OtraCategoria" httpResponseStatus="200" mediaType="application/json" id="a5d0ac5e-33c6-45df-b681-76617a7b7286"><con:settings/><con:responseContent>{
	"catId": "OTRA CATEGORIA",
	"campos":[
		{
			"nombre":"Monto",
			"condicion":[
				{
					"key":">=",
					"value":"mayorIgualQue"
				},
				{
					"key":"&lt;=",
					"value":"menorIgualQue"
				},
				{
					"key":"=",
					"value":"igual"
				},
				{
					"key":"BETWEEN",
					"value":"entre"
				}

			],
			"tipoValor":"numerico",
			"valorReferencia": ""
		},
		{
			"nombre":"Producto",
			"condicion":[
				{
					"key":"=",
					"value":"igual"
				},
				{
					"key":"!=",
					"value":"distinto"
				},
				{
					"key":"IN",
					"value":"dentro de"
				}
			],
			"tipoValor":"seleccion",
			"valorReferencia":[
				{
					"key":"Vehiculo",
					"value":"vehiculo"
				},
				{
					"key":"Libranzas",
					"value":"libranzas"
				}
			]
		},
		{
			"nombre":"TechnoIndividual",
			"condicion":[
				{
					"key":">=",
					"value":"mayorIgualQue"
				},
				{
					"key":"&lt;=",
					"value":"menorIgualQue"
				},
				{
					"key":"=",
					"value":"igual"
				},
				{
					"key":"BETWEEN",
					"value":"entre"
				}

			],
			"tipoValor":"numerico",
			"valorReferencia": ""
		},
		{
			"nombre":"TechoGlobal",
			"condicion":[
				{
					"key":">=",
					"value":"mayorIgualQue"
				},
				{
					"key":"&lt;=",
					"value":"menorIgualQue"
				},
				{
					"key":"=",
					"value":"igual"
				},
				{
					"key":"BETWEEN",
					"value":"entre"
				}

			],
			"tipoValor":"numerico",
			"valorReferencia": ""
		},
		{
			"nombre":"FuerzaVenta",
			"condicion":[
				{
					"key":">=",
					"value":"mayorIgualQue"
				},
				{
					"key":"&lt;=",
					"value":"menorIgualQue"
				},
				{
					"key":"=",
					"value":"igual"
				},
				{
					"key":"BETWEEN",
					"value":"entre"
				}

			],
			"tipoValor":"numerico",
			"valorReferencia": ""
		},
		{
			"nombre":"TipoCliente",
			"condicion":[
				{
					"key":"=",
					"value":"igual"
				},
				{
					"key":"!=",
					"value":"distinto"
				},
				{
					"key":"dentro de",
					"value":"dentro de"
				}
			],
			"tipoValor":"seleccion",
			"valorReferencia":[
				{
					"key":"VIP",
					"value":"vip"
				},
				{
					"key":"Especial",
					"value":"especial"
				}
			]
		},
		{
			"nombre":"NombreConvenio",
			"condicion":[
				{
					"key":"=",
					"value":"igual"
				},
				{
					"key":"!=",
					"value":"distinto"
				},
				{
					"key":"dentro de",
					"value":"dentro de"
				}
			],
			"tipoValor":"seleccion",
			"valorReferencia":[
				{
					"key":"Accionistas",
					"value":"accionistas"
				},
				{
					"key":"Trabajadores",
					"value":"trabajadores"
				}
			]
		}
	]
}</con:responseContent><con:header><con:name>Access-Control-Allow-Origin</con:name><con:value>*</con:value></con:header><con:header><con:name>Access-Control-Allow-Methods</con:name><con:value>POST, GET</con:value></con:header></con:response></con:restMockAction><con:restMockAction name="/services/reglas" method="GET" resourcePath="/services/reglas" id="acccc120-2229-42d1-a38e-61b13f72391d"><con:settings/><con:defaultResponse xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/><con:dispatchStyle>SCRIPT</con:dispatchStyle><con:dispatchPath>def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("categoria") )
{
	
    	if(queryString.contains("categoria=Natural"))    
    		return "Natural2"
	else{
    		return "SinRespuest"
	}    	    	
}else{
	return "NOCatResponse"
}


/*
// Script dispatcher is used to select a response based on the incoming request.
// Here are few examples showing how to match based on path, query param, header and body

// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeaderList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncoding Header List: " + acceptEncodingHeaderList

if( acceptEncodingHeaderList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}


// Match based on body
def requestBody = mockRequest.getRequestContent()
log.info "Request body: " + requestBody

if( requestBody.contains("some data") )
{
    // return the name of the response you want to dispatch
    return "Response N"
}
*/
</con:dispatchPath><con:response name="SinRespuest" httpResponseStatus="200" mediaType="application/json" id="0ea46d8f-d926-453e-b355-e925b24bfd4d"><con:settings/><con:responseContent>[]</con:responseContent><con:header><con:name>Access-Control-Allow-Origin</con:name><con:value>*</con:value></con:header><con:header><con:name>Access-Control-Allow-Methods</con:name><con:value>POST, GET</con:value></con:header></con:response><con:response name="NOCatResponse" httpResponseStatus="204" mediaType="application/json" id="253e0617-b413-4252-bf25-ca3ca2033f5e"><con:settings/><con:responseContent>{"error":"La peticion debe incluir el parametro 'categoria'"}</con:responseContent><con:header><con:name>Access-Control-Allow-Methods</con:name><con:value>POST, GET</con:value></con:header><con:header><con:name>Access-Control-Allow-Origin </con:name><con:value>*</con:value></con:header></con:response><con:response name="Natural" httpResponseStatus="200" mediaType="application/json" id="9f014b61-c554-4354-a5a7-3610bb90b1d4"><con:settings/><con:responseContent>[{
		"userId": 4,
		"userName": "Walter Bates",
		"catId": 1,
		"lastModified": "",
		"restricciones": [{
				"nombre": "Producto",
				"condicion": "IN",
				"valor": [
					"Vehiculo",
					"Libranzas"
				]
			}, {
				"nombre": "Monto",
				"condicion": "=",
				"valor": [
					555
				]
			}, {
				"valor": [
					"Libranzas"
				],
				"nombre": "Producto",
				"condicion": "!="
			}, {
				"valor": [
					"200",
					"50000"
				],
				"nombre": "TechoGlobal",
				"condicion": "BETWEEN"
			}
		],
		"prioridades": [{
				"nombre": "Producto",
				"condicion": "IN",
				"valor": [
					"Vehiculo",
					"Libranzas"
				],
				"peso": "23"
			}, {
				"valor": [
					"5000"
				],
				"nombre": "TechnoIndividual",
				"condicion": "&lt;=",
				"peso": "48"
			}
		],
		"ordenes": [{
				"nombre": "Producto",
				"criterio": "ASC"
			}, {
				"criterio": "DESC",
				"nombre": "TechoGlobal"
			}
		]
	}
]</con:responseContent><con:header><con:name>Access-Control-Allow-Origin</con:name><con:value>*</con:value></con:header><con:header><con:name>Access-Control-Allow-Methods</con:name><con:value>POST, GET</con:value></con:header></con:response><con:response name="Natural2" httpResponseStatus="200" mediaType="application/json" id="e389f4fc-8405-4b14-af7c-1cf7777fc9d9"><con:settings/><con:responseContent>[{
		"userId": 1,
		"userName": "william.jobs",
		"catId": "Natural",
		"lastModified": "",
		"restricciones": [{
				"nombre": "Producto",
				"condicion": "IN",
				"valor": [
					"Vehiculo",
					"Libranzas"
				]
			}, {
				"nombre": "Monto",
				"condicion": "=",
				"valor": [
					555
				]
			}, {
				"valor": [
					"Libranzas"
				],
				"nombre": "Producto",
				"condicion": "!="
			}, {
				"valor": [
					"200",
					"50000"
				],
				"nombre": "TechoGlobal",
				"condicion": "BETWEEN"
			}
		],
		"prioridades": [{
				"nombre": "Producto",
				"condicion": "IN",
				"valor": [
					"Vehiculo",
					"Libranzas"
				],
				"peso": "23"
			}, {
				"valor": [
					"5000"
				],
				"nombre": "TechnoIndividual",
				"condicion": "&lt;=",
				"peso": "48"
			}
		],
		"ordenes": [{
				"nombre": "Producto",
				"criterio": "ASC"
			}, {
				"criterio": "DESC",
				"nombre": "TechoGlobal"
			}
		]
	},{
		"userId": 4,
		"userName": "Walter Bates",
		"catId": "Natural",
		"lastModified": "",
		"restricciones": [{
				"nombre": "Producto",
				"condicion": "IN",
				"valor": [
					"Vehiculo",
					"Libranzas"
				]
			}, {
				"nombre": "Monto",
				"condicion": "=",
				"valor": [
					555
				]
			}, {
				"valor": [
					"Libranzas"
				],
				"nombre": "Producto",
				"condicion": "!="
			}, {
				"valor": [
					"200",
					"50000"
				],
				"nombre": "TechoGlobal",
				"condicion": "BETWEEN"
			}
		],
		"prioridades": [{
				"nombre": "Producto",
				"condicion": "IN",
				"valor": [
					"Vehiculo",
					"Libranzas"
				],
				"peso": "23"
			}, {
				"valor": [
					"5000"
				],
				"nombre": "TechnoIndividual",
				"condicion": "&lt;=",
				"peso": "48"
			}
		],
		"ordenes": [{
				"nombre": "Producto",
				"criterio": "ASC"
			}, {
				"criterio": "DESC",
				"nombre": "TechoGlobal"
			}
		]
	}
]</con:responseContent><con:header><con:name>Access-Control-Allow-Origin</con:name><con:value>*</con:value></con:header><con:header><con:name>Access-Control-Allow-Methods</con:name><con:value>POST, GET</con:value></con:header></con:response></con:restMockAction><con:restMockAction name="/services/reglas" method="POST" resourcePath="/services/reglas" id="4fa16416-5b5d-4fe7-b572-9df3f7475836"><con:settings/><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Script dispatcher is used to select a response based on the incoming request.
// Here are few examples showing how to match based on path, query param, header and body

// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeaderList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncoding Header List: " + acceptEncodingHeaderList

if( acceptEncodingHeaderList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}


// Match based on body
def requestBody = mockRequest.getRequestContent()
log.info "Request body: " + requestBody

if( requestBody.contains("some data") )
{
    // return the name of the response you want to dispatch
    return "Response N"
}
*/
</con:dispatchPath><con:response name="OK" id="5cb1d043-de6b-4079-85c5-94145b5b7166" httpResponseStatus="200" mediaType="application/json"><con:settings/><con:responseContent>OK</con:responseContent><con:header><con:name>Access-Control-Allow-Methods</con:name><con:value>POST, GET</con:value></con:header><con:header><con:name>Access-Control-Allow-Origin </con:name><con:value>*</con:value></con:header></con:response></con:restMockAction></con:restMockService><con:properties/><con:wssContainer/><con:oAuth2ProfileContainer/><con:oAuth1ProfileContainer/><con:sensitiveInformation/></con:soapui-project>